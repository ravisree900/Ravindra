DevOps and Cloud With Siva Terraform
====================================

Terraform is an Infrastructure as a code tool developed by Harshi crop. 

Advantages:  
==>	Automated infra as CRUD (Create, Read, Update and Delete), With in a minute we can create, read, update, and delete the code.

==> Version Control System: While we are creating the infrastructure, we have pushed that code into git hub repo with commit ids along with versions and track it properly, it is easy to collaborate also with team members.
==>	Consistence Infrastructure: Using terraform, we can create similar infrastructure in all environments (like Dev, Test and Prod) without duplicating.

==> Inventory Management: By seeing the terraform code, we can understand the resources we are using, we are no need to go to console and fetch the report.

==> Cost Optimization: It can destroy the infra within a minute, to reduce the cost and other forgetting resources to delete.

==>	Automatic dependency resolution: Terraform will take care of dependency resolution while creating and deleting of resources.

Modular Infra:   DRY  Don’t Repeat Yourself. We can create a single infra code for projects in our organisation by using modules. We can reuse these modules we can create a infra code for multiple projects instead of we are writing from scratch.


In Terraform we need to focus on Variables for DRY:
==================================================
1. Variables
2. Data Type
3. Conditions
4. Functions
5. Loops
6. Count and Count.index
---------------------------

1. Variables:
-------------
Syntax of Variable code:

variable "name_of_variable" {
	type = "string"
	default = "value"
}

In these variables we are having 
1. numbers
2. strings
3. boolean(bool)
4. map
5. list

First we need to open visual code studio to write the code.

provider.tf file

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
}


main.tf

resource "aws_vpc" "main" {
  cidr_block       = var.cidr_block
  instance_tenancy = var.instance_tenancy
  enable_dns_support = var.dns_support
  enable_dns_hostnames = var.dns_hostnames

  tags = var.tags
}

variable.tf file

variable "cidr_block" {
    type = string
    default = "10.0.0.0/16"
}

variable "instance_tenancy" {
    type = string
    default = "default"
}

variable "dns_support" {
    type = bool
    default = "true"
}

variable "dns_hostnames" {
    type = bool
    default = "true"
}

variable "tags" {
    type = map(string)
    default = {
        Name = "timing"
        Terraform = "true"
        Environment = "DEV"
    }
}


==>  here we need to create 3 files(provider.tf, main.tf, variable.tf)  after that we need to execute the commands.

terraform init
terraform validate
terraform plan
terraform apply --auto-approve

========================================================================================================================================================================

Here we need to create a security group along with that VPC in main.tf file.

# this security group for postgress RDS, 5432

resource "aws_security_group" "allow_postgres" {
  name        = "allow_postgres"
  description = "Allow postgres inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    description      = "TLS from VPC"
    from_port        = var.postgres_ports
    to_port          = var.postgres_ports
    protocol         = "tcp"
    cidr_blocks      = var.cidr_list
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = var.tags
}
----------------------------------------------

Variable section:

variable "tags" {
    type = map(string)
    default = {
        Name = "timing"
        Terraform = "true"
        Environment = "DEV"
    }
}

variable.tf

variable "postgres_ports"  {
  type = number
  default = "5432"
}

variable = "cidr_list" {
  type = list
  default = ["10.0.1.0/24","10.0.2.0/24"]
}

Apply this commands for execution of Above code

terraform init
terraform validate
terraform plan
terraform apply --auto-approve
=============================================

Count and Count index
---------------------

we have a task for creating 3 EC2 instances for
1. Web Server
2. Api server
3. DB server

# the basic syntax we need to create like this 
# Ami ids are diffrent for diffrent regions

resource "aws_instance" "web" {
  ami  = "our ami id"
  instance_type = "t3.micro"

  tags = {
    Name = "web_app"
  }
}

resource "aws_instance" "api" {
  ami  = "our ami id"
  instance_type = "t3.micro"

  tags = {
    Name = "api_app"
  }
}

resource "aws_instance" "DB" {
  ami  = "our ami id"
  instance_type = "t3.micro"

  tags = {
    Name = "DB_app"
  }
}

Apply this commands for execution of Above code

terraform init
terraform validate
terraform plan
terraform apply --auto-approve


# In this above Scenario we are using the code repeated way we are working the infra in Don't repeat yourself(DRY). so the code will be

resource "aws_instance" "web" {
    ami = "our ami id"
    instance_type = "t2.micro"
	count = 3
    tags = {
        Name = "web"
    }
}

Apply this commands for execution of Above code

terraform init
terraform validate
terraform plan
terraform apply --auto-approve

==> it will create the instances with same names but we need one  instance as "WEB", Second as "API" and last one as "DB" like this for that kind of scenario the code will be

resource "aws_instance" "web" {
    ami = "our ami id"
    instance_type = "t2.micro"
    count = 3
    tags = {
	  Name = var.instance_names[count.index]
	}
}

in variable section:

variable "instance_names" {
  type = list
  default = ["Web-server", "Api-server", "DB-server"]
}

Apply this commands for execution of Above code

terraform init
terraform validate
terraform plan
terraform apply --auto-approve

=================================================

Conditions:
-----------
The basic syntax for the conditions is: 

day=monday
if (day==sunday){
	print "holiday"
}
else {
	print "go to office"
}

expression ? "if the condition is true" : "this will run if false"

Here we need to create an EC2 instance Scenario for better understanding

if the env is prod create t3.large instance, if it is false create t2.micro

the syntax for this scenario is

resource "aws_instance" "web" {
    ami = "our ami id"
    instance_type = var.isprod ? "t3.large" : "t2.micro"
}

in variable session:

variable "isprod" {
    type = bool
    default = true
}

Execute the commands to check the code is working or not

terraform validate
terraform plan
terraform apply --auto-approve

here the expression is true it will create t3.large, if it is false it will create t2.micro (to check this change default to "false")

--------------------------------------------------------------------------------------------

for this i have another scenario is there

resource "aws_instance" "web" {
    ami = "our ami id"
    instance_type = var.env == "PROD" ? "t3.large" : "t2.micro"
}

in variable session:

variable "env" {
    type = string
    default = "PROD"
}

here the expression is true it will create t3.large, if it is false it will create t2.micro (to check this change default to "DEV")

===========================================================================================================

Functions: (Try this in windows CMD)
----------

It can do a unit of work whenever we ask. to check this type of scenarios we need to login "terraform console" by executing the command as

"terraform console" it will conntect to inside terminal

max (10,20,500,6000)
6000 it shows 

min (25,45,85,92)
25 it shows

join ("-"["ravindra","reddy","venkata"]) 
output: "ravindra-reddy-venkata"

join (" "["ravindra","reddy","venkata"]) 
output: "ravindra reddy venkata"

split (" ","ravindr reddy venkata")
output: 
 "ravindr",
  "reddy",
  "venkata",
  
split (",", "ravindra,reddy,venkata")
output: 
  "ravindra",
  "reddy",
  "venkata",
  
Merge function:

if we need to change the name for diffrent resources with diffrent names with merge function. we do not edit the variable tags.

example =

variable "tags" {
    type = map(string)
    default = {
        Name = "timing"
        Terraform = "true"
        Environment = "DEV"
    }
}

i need to change name as timing-rds-sg for security group purpose instead of timing. In this scenario we can use merge function.

the syntax will be

resource "aws_security_group" "allow_postgres" {
  name        = "allow_postgres"
  description = "Allow postgres inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    description      = "TLS from VPC"
    from_port        = var.postgres_ports
    to_port          = var.postgres_ports
    protocol         = "tcp"
    cidr_blocks      = var.cidr_list
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = merge (
    var.tags, {
      Name = "timing-RDS-SG"
    }
  )
}

here the name only replace with this one remaining this will be same.

to execute this the commands will be:

terraform validate
terraform plan
terraform apply --auto-approve

====================================================================

Loops: 

for (int i=0; i <= 10; i++){
	
	print "value: $i"
}

In this scenario we need to create 3 public subnets in multiple availability zones for diaster recovery

The code will be like this

resource "aws_subnet" "public" {
  for_each = var.public-subnets
  vpc_id = aws_vpc.main.id
  cidr_block = each.value.cidr_block
  availability_zone = each.value.az
  tags = {
    Name = each.value.Name
  }
}

in variable section:

variable "public-subnets" {
    default = 
    {
        "one" = {
            cidr_block = "10.0.1.0/24"
            Name = "public-subnet-01"
            az = "ap-south-1a"
        }
        "two" = {
            cidr_block = "10.0.2.0/24"
            Name = "public-subnet-02"
            az = "ap-south-1b"
        }
        "three" = {
            cidr_block = "10.0.3.0/24"
            Name = "public-subnet-03"
            az = "ap-south-1c"
        }

    }
}

========================================================================================

